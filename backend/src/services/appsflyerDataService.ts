import { createCoreDbConnection } from '../utils/database';

export const appsflyerDataService = {
  // Ëé∑ÂèñÊâÄÊúâ AppsFlyer ‰∫ã‰ª∂Á±ªÂûã
  async getAllEventNames() {
    try {
      const sql = `
        SELECT DISTINCT event_name 
        FROM appsflyer_callback
        WHERE event_name IS NOT NULL AND event_name != ''
        ORDER BY event_name ASC
      `;
      
      console.log('üîç [AppsFlyer] ÂºÄÂßãÊü•ËØ¢‰∫ã‰ª∂Á±ªÂûãÂàóË°®...');
      console.log('SQL:', sql.trim());
      
      const connection = await createCoreDbConnection();
      const [rows] = await connection.execute(sql);
      await connection.end();
      
      const eventNames = (rows as any[]).map(row => row.event_name);
      console.log('‚úÖ [AppsFlyer] Ëé∑ÂèñÂà∞‰∫ã‰ª∂Á±ªÂûã:', eventNames.length, '‰∏™');
      console.log('‰∫ã‰ª∂ÂàóË°®:', eventNames);
      
      return eventNames;
    } catch (error) {
      console.error('‚ùå [AppsFlyer] Ëé∑Âèñ‰∫ã‰ª∂Á±ªÂûãÂàóË°®Â§±Ë¥•:', error);
      throw error;
    }
  },

  // Ëé∑ÂèñÊâÄÊúâ app_id
  async getAllAppIds() {
    try {
      const sql = `
        SELECT DISTINCT app_id 
        FROM appsflyer_callback 
        WHERE app_id IS NOT NULL AND app_id != ''
        ORDER BY app_id ASC
      `;
      console.log('üîç [AppsFlyer] ÂºÄÂßãÊü•ËØ¢ app_id ÂàóË°®...');
      console.log('SQL:', sql.trim());
      const connection = await createCoreDbConnection();
      const [rows] = await connection.execute(sql);
      await connection.end();
      const appIds = (rows as any[]).map(row => row.app_id);
      console.log('‚úÖ [AppsFlyer] Ëé∑ÂèñÂà∞ app_id Êï∞Èáè:', appIds.length);
      console.log('app_id ÂàóË°®:', appIds);
      return appIds;
    } catch (error) {
      console.error('‚ùå [AppsFlyer] Ëé∑Âèñ app_id ÂàóË°®Â§±Ë¥•:', error);
      throw error;
    }
  },


  // Ëé∑ÂèñÊâÄÊúâ media_source
  async getAllMediaSources() {
    try {
      const sql = `
        SELECT DISTINCT media_source 
        FROM appsflyer_callback 
        WHERE media_source IS NOT NULL AND media_source != ''
        ORDER BY media_source ASC
      `;
      
      const connection = await createCoreDbConnection();
      const [rows] = await connection.execute(sql);
      await connection.end();
      
      return (rows as any[]).map(row => row.media_source);
    } catch (error) {
      console.error('Ëé∑Âèñ media_source ÂàóË°®Â§±Ë¥•:', error);
      throw error;
    }
  },

  // Ëé∑Âèñ AppsFlyer ÂõûË∞ÉÊï∞ÊçÆÔºàÂàÜÈ°µÔºåÊîØÊåÅÁ≠õÈÄâÔºâ
  async getAppsflyerData(
    startDate?: string, 
    endDate?: string, 
    page: number = 1, 
    pageSize: number = 10,
    appId?: string,
    mediaSource?: string
  ) {
    const validPage = Math.max(1, parseInt(page.toString()));
    const validPageSize = Math.min(Math.max(1, parseInt(pageSize.toString())), 100);
    
    // Â§ÑÁêÜÊó•ÊúüÂèÇÊï∞ÔºåÂ¶ÇÊûúÊòØÂÖ∑‰ΩìÊó•ÊúüÂàôÂä†ÂºïÂè∑ÔºåÂ¶ÇÊûúÊòØSQLÂáΩÊï∞Âàô‰∏çÂä†
    const defaultStartDate = startDate ? `'${startDate}'` : 'DATE_SUB(CURDATE(), INTERVAL 30 DAY)';
    const defaultEndDate = endDate ? `'${endDate}'` : 'CURDATE()';
    
    try {
      const eventNames = await this.getAllEventNames();
      
      if (eventNames.length === 0) {
        return {
          data: [],
          pagination: { page: validPage, limit: validPageSize, total: 0, totalPages: 0 },
          eventNames: []
        };
      }

      // ÊûÑÂª∫Á≠õÈÄâÊù°‰ª∂
      const filterConditions = [];
      if (appId) {
        const escapedAppId = appId.replace(/'/g, "''");
        filterConditions.push(`app_id = '${escapedAppId}'`);
      }
      if (mediaSource) {
        const escapedMediaSource = mediaSource.replace(/'/g, "''");
        filterConditions.push(`media_source = '${escapedMediaSource}'`);
      }
      const additionalWhere = filterConditions.length > 0 ? `AND ${filterConditions.join(' AND ')}` : '';

      // Âä®ÊÄÅÊûÑÂª∫ÊØè‰∏™‰∫ã‰ª∂Á±ªÂûãÁöÑÁªüËÆ°Â≠êÊü•ËØ¢
      const eventStatsJoins = eventNames.map((eventName) => {
        const sanitizedName = eventName.replace(/[^a-zA-Z0-9_]/g, '_');
        const escapedEventName = eventName.replace(/'/g, "''");
        
        return `
        LEFT JOIN (
           SELECT
          DATE(callback.created_at) AS date_col,
          COUNT(callback.appsflyer_id) AS count_${sanitizedName}
          FROM (
          SELECT
          appsflyer_id,
          MIN(created_at) AS created_at
          FROM appsflyer_callback
          WHERE event_name = '${escapedEventName}' 
          AND callback_status = 'processed'
          ${additionalWhere}
          GROUP BY id
          ) AS callback
          GROUP BY DATE(callback.created_at)
        ) stats_${sanitizedName} ON stats_${sanitizedName}.date_col = date_series.date_col`;
      }).join('\n');

      const selectColumns = eventNames.map((eventName) => {
        const sanitizedName = eventName.replace(/[^a-zA-Z0-9_]/g, '_');
        return `COALESCE(stats_${sanitizedName}.count_${sanitizedName}, 0) AS event_${sanitizedName}`;
      }).join(',\n          ');

      const sql = `
        SELECT 
          DATE_FORMAT(date_series.date_col, '%Y-%m-%d') AS query_date
          ${selectColumns ? ',' + selectColumns : ''}
        FROM (
            SELECT DATE_ADD(${defaultStartDate}, INTERVAL (a.a + (10 * b.a)) DAY) AS date_col
            FROM (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS a
            CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS b
            WHERE DATE_ADD(${defaultStartDate}, INTERVAL (a.a + (10 * b.a)) DAY) <= ${defaultEndDate}
        ) AS date_series
        ${eventStatsJoins}
        WHERE date_series.date_col IS NOT NULL
        ORDER BY date_series.date_col DESC
        LIMIT ${validPageSize} OFFSET ${(validPage - 1) * validPageSize}
      `;

      console.log('üîç [AppsFlyer] ÊâßË°åÊï∞ÊçÆÊü•ËØ¢');
      console.log('‰∫ã‰ª∂Êï∞Èáè:', eventNames.length);
      console.log('Êó•ÊúüËåÉÂõ¥:', defaultStartDate, 'Âà∞', defaultEndDate);
      console.log('Á≠õÈÄâÊù°‰ª∂:', { appId, mediaSource });
      console.log('Á≠õÈÄâÊù°‰ª∂:', { appId, mediaSource });
      console.log('ÂàÜÈ°µÂèÇÊï∞:', { page: validPage, pageSize: validPageSize });
      console.log('ÂÆåÊï¥SQLËØ≠Âè•:');
      console.log(sql);
      console.log('--- SQLÁªìÊùü ---');
      
      const connection = await createCoreDbConnection();
      const startTime = Date.now();
      const [rows] = await connection.execute(sql);
      const queryTime = Date.now() - startTime;
      await connection.end();
      
      console.log(`‚úÖ [AppsFlyer] Êü•ËØ¢ÂÆåÊàêÔºåËÄóÊó∂: ${queryTime}ms, ËøîÂõûËÆ∞ÂΩïÊï∞: ${(rows as any[]).length}`);
      if ((rows as any[]).length > 0) {
        console.log('Á¨¨‰∏ÄÊù°ËÆ∞ÂΩïÁ§∫‰æã:', (rows as any[])[0]);
      }

      // Ëé∑ÂèñÊÄªÊï∞
      const countSql = `
        SELECT COUNT(*) as total
        FROM (
            SELECT DATE_ADD(${defaultStartDate}, INTERVAL (a.a + (10 * b.a)) DAY) AS date_col
            FROM (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS a
            CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS b
            WHERE DATE_ADD(${defaultStartDate}, INTERVAL (a.a + (10 * b.a)) DAY) <= ${defaultEndDate}
        ) AS date_series
        WHERE date_series.date_col IS NOT NULL
      `;

      const countConnection = await createCoreDbConnection();
      const [countRows] = await countConnection.execute(countSql);
      await countConnection.end();

      const total = (countRows as any)[0]?.total || 0;
      const totalPages = Math.ceil(total / validPageSize);

      return {
        data: rows,
        pagination: { page: validPage, limit: validPageSize, total: total, totalPages: totalPages },
        eventNames: eventNames
      };

    } catch (error) {
      console.error('Ëé∑Âèñ AppsFlyer Êï∞ÊçÆÂ§±Ë¥•:', error);
      throw error;
    }
  },

  // Ëé∑Âèñ AppsFlyer ÂõæË°®Êï∞ÊçÆÔºà‰∏çÂàÜÈ°µÔºåÊîØÊåÅÁ≠õÈÄâÔºâ
  async getAppsflyerChartData(
    startDate?: string, 
    endDate?: string,
    appId?: string,
    mediaSource?: string
  ) {
    // Â§ÑÁêÜÊó•ÊúüÂèÇÊï∞ÔºåÂ¶ÇÊûúÊòØÂÖ∑‰ΩìÊó•ÊúüÂàôÂä†ÂºïÂè∑ÔºåÂ¶ÇÊûúÊòØSQLÂáΩÊï∞Âàô‰∏çÂä†
    const defaultStartDate = startDate ? `'${startDate}'` : 'DATE_SUB(CURDATE(), INTERVAL 30 DAY)';
    const defaultEndDate = endDate ? `'${endDate}'` : 'CURDATE()';
    
    try {
      const eventNames = await this.getAllEventNames();
      
      if (eventNames.length === 0) {
        return { data: [], eventNames: [] };
      }

      // ÊûÑÂª∫Á≠õÈÄâÊù°‰ª∂
      const filterConditions = [];
      if (appId) {
        const escapedAppId = appId.replace(/'/g, "''");
        filterConditions.push(`app_id = '${escapedAppId}'`);
      }
      if (mediaSource) {
        const escapedMediaSource = mediaSource.replace(/'/g, "''");
        filterConditions.push(`media_source = '${escapedMediaSource}'`);
      }
      const filterWhere = filterConditions.length > 0 ? `AND ${filterConditions.join(' AND ')}` : '';

      const eventStatsJoins = eventNames.map((eventName) => {
        const sanitizedName = eventName.replace(/[^a-zA-Z0-9_]/g, '_');
        const escapedEventName = eventName.replace(/'/g, "''");
        
        return `
        LEFT JOIN (
            SELECT 
                DATE(created_at) AS date_col,
                COUNT(DISTINCT customer_user_id) AS count_${sanitizedName}
            FROM appsflyer_callback
            WHERE event_name = '${escapedEventName}' 
              AND callback_status = 'processed'
              AND customer_user_id IS NOT NULL
              ${filterWhere}
            GROUP BY DATE(created_at)
        ) stats_${sanitizedName} ON stats_${sanitizedName}.date_col = date_series.date_col`;
      }).join('\n');

      const selectColumns = eventNames.map((eventName) => {
        const sanitizedName = eventName.replace(/[^a-zA-Z0-9_]/g, '_');
        return `COALESCE(stats_${sanitizedName}.count_${sanitizedName}, 0) AS event_${sanitizedName}`;
      }).join(',\n          ');

      const sql = `
        SELECT 
          DATE_FORMAT(date_series.date_col, '%Y-%m-%d') AS query_date
          ${selectColumns ? ',' + selectColumns : ''}
        FROM (
            SELECT DATE_ADD(${defaultStartDate}, INTERVAL (a.a + (10 * b.a)) DAY) AS date_col
            FROM (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS a
            CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS b
            WHERE DATE_ADD(${defaultStartDate}, INTERVAL (a.a + (10 * b.a)) DAY) <= ${defaultEndDate}
        ) AS date_series
        ${eventStatsJoins}
        WHERE date_series.date_col IS NOT NULL
        ORDER BY date_series.date_col ASC
      `;

      console.log('ÊâßË°å AppsFlyer ÂõæË°®SQLÊü•ËØ¢Ôºå‰∫ã‰ª∂Êï∞Èáè:', eventNames.length);
      
      const connection = await createCoreDbConnection();
      const [rows] = await connection.execute(sql);
      await connection.end();

      return { data: rows, eventNames: eventNames };

    } catch (error) {
      console.error('Ëé∑Âèñ AppsFlyer ÂõæË°®Êï∞ÊçÆÂ§±Ë¥•:', error);
      throw error;
    }
  }
};

